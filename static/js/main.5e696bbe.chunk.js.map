{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","selectedOption","handleChange","_this","setState","index","value","students","fetch","headers","Content-Type","Accept","res","json","options","map","elem","label","mentorName","this","undefined","studentsArr","react_default","a","createElement","react_select_esm","onChange","App_Row","row","App_Column","Component","Row","props","cell","studentName","Column","tasks","taskName","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAKMA,oNACFC,MAAQ,CACJC,KAAM,GACNC,eAAgB,QAKpBC,aAAe,SAACD,GACZE,EAAKC,SAAS,CAAEH,mBAChB,IAAMI,EAAQJ,EAAeK,MACvBC,EAAWJ,EAAKJ,MAAMC,KAAKK,GAAOE,SACxCJ,EAAKC,SAAS,CAACG,mOAMDC,MAAM,cAAe,CACnCC,QAAU,CACNC,eAAgB,mBAChBC,OAAU,oCAHZC,kBAOaA,EAAIC,cAAjBb,SAEAc,EAAUd,EAAKe,IAAM,SAACC,EAAMX,GAC9B,MAAO,CACCC,MAAOD,EAAOY,MAAQD,EAAKE,cAIvCC,KAAKf,SAAS,CAACJ,KAAMA,IACrBmB,KAAKf,SAAS,CAACU,QAASA,uIAOjB,IACCb,EAAmBkB,KAAKpB,MAAxBE,eACN,QAA4BmB,IAAxBD,KAAKpB,MAAMQ,SAAwB,CACnC,IAAMc,EAAcF,KAAKpB,MAAMQ,SAE/B,OAAQe,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACInB,MAAOL,EACPyB,SAAUP,KAAKjB,aACfY,QAASK,KAAKpB,MAAMe,UAExBQ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAACG,EAAD,CAAKC,IAAOP,IACZC,EAAAC,EAAAC,cAACK,EAAD,CAAQD,IAAOP,OAM/B,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACJnB,MAAOL,EACPyB,SAAUP,KAAKjB,aACfY,QAASK,KAAKpB,MAAMe,iBAjENgB,cAyEZC,mLAEE,IAAOH,EAAOT,KAAKa,MAAMJ,IAEzB,OACQN,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,6BACEI,EAAIb,IAAK,SAACkB,GAAD,OACPX,EAAAC,EAAAC,cAAA,cAAMS,EAAKC,wBATrBJ,aAoBZK,mLAGE,OADchB,KAAKa,MAAMJ,IAGjB,GAAGQ,MAAMrB,IAAI,SAAAkB,GAAI,OACjBX,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACKS,EAAKI,oBARTP,aAkBNhC,ICxGKwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5e696bbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Select from 'react-select';\nimport './App.css';\n\n\nclass App extends Component {\n    state = {\n        data: {},\n        selectedOption: null,\n        //options: []\n        //students: []\n    };\n\n    handleChange = (selectedOption) => {\n        this.setState({ selectedOption });\n        const index = selectedOption.value;\n        const students = this.state.data[index].students;\n        this.setState({students});\n        //console.log(`Option selected:`, selectedOption);\n        //console.log('students', students);\n    }\n\nasync componentDidMount() {\n    const res = await fetch('./data.json', {\n        headers : {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n    });\n    const data = await res.json();\n\n    const options = data.map ( (elem, index) => {\n        return {\n                value: index, label : elem.mentorName\n            }\n        }\n    )\n    this.setState({data: data})\n    this.setState({options: options});\n    //console.log(data);\n    //console.log('options - ', options);\n\n\n}\n\n  render() {\n    const { selectedOption } = this.state;\n      if (this.state.students !== undefined) {\n          const studentsArr = this.state.students;\n\n          return (<div>\n              <Select\n                  value={selectedOption}\n                  onChange={this.handleChange}\n                  options={this.state.options}\n              />\n              <table>\n                <tbody>\n                    <Row row = {studentsArr} />\n                    <Column row = {studentsArr}  />\n                </tbody>\n              </table>\n          </div>\n          )}\n          else {\n    return (\n        <Select\n    value={selectedOption}\n    onChange={this.handleChange}\n    options={this.state.options}\n         />\n\n\n    )}\n  }\n}\n\nclass Row extends Component {\n    render() {\n        const  row  = this.props.row\n        //console.log('row -', row)\n        return (\n                <th>\n                    <tr>\n                        <td>Tasks / Student</td>\n                        { row.map( (cell) =>\n                            <td> {cell.studentName}</td>\n\n                        ) }\n                    </tr>\n                </th>\n\n        )\n\n    }\n}\n\nclass Column extends Component {\n    render() {\n        const  row  = this.props.row\n        return (\n\n            row[0].tasks.map(cell =>\n                <tr>\n                    <td>\n                        {cell.taskName}\n                    </td>\n                </tr>)\n\n        )\n\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}